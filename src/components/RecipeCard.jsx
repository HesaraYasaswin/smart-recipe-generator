import React from 'react'

/**
 * RecipeCard component
 * @param {Object} props
 * @param {Object} props.recipe - { title, description, difficulty, time, servings, dietary, ingredients, instructions, substitutions }
 * @param {string[]} props.inputIngredients - The original user input ingredients
 */
const RecipeCard = ({ recipe, inputIngredients = [] }) => {
  const inputSet = new Set(inputIngredients.map(i => i.trim().toLowerCase()))

  // Function to save recipe as text file
  const handleSaveRecipe = () => {
    // Create recipe content as formatted text
    let recipeContent = `${recipe.title}\n${'='.repeat(recipe.title.length)}\n\n`
    
    // Add description if available
    if (recipe.description) {
      recipeContent += `Description: ${recipe.description}\n\n`
    }
    
    // Add recipe stats
    const stats = []
    if (recipe.difficulty) stats.push(`Difficulty: ${recipe.difficulty}`)
    if (recipe.time) stats.push(`Time: ${recipe.time}`)
    if (recipe.servings) stats.push(`Servings: ${recipe.servings}`)
    if (recipe.dietary && recipe.dietary.length > 0) stats.push(`Dietary: ${recipe.dietary.join(', ')}`)
    
    if (stats.length > 0) {
      recipeContent += `${stats.join(' | ')}\n\n`
    }
    
    // Add ingredients
    recipeContent += `INGREDIENTS:\n${'-'.repeat(12)}\n`
    recipe.ingredients.forEach((ingredient) => {
      recipeContent += `• ${ingredient}\n`
    })
    
    // Add instructions
    recipeContent += `\nINSTRUCTIONS:\n${'-'.repeat(12)}\n`
    recipe.instructions.forEach((step, idx) => {
      recipeContent += `${idx + 1}. ${step}\n\n`
    })
    
    // Add substitutions if available
    if (recipe.substitutions && recipe.substitutions.length > 0) {
      recipeContent += `SUGGESTED SUBSTITUTIONS:\n${'-'.repeat(24)}\n`
      recipe.substitutions.forEach((sub) => {
        recipeContent += `• ${sub}\n`
      })
    }
    
    // Add footer
    recipeContent += `\n\n--- Recipe generated by Smart Recipe Generator ---\n`
    recipeContent += `Generated on: ${new Date().toLocaleDateString()}\n`
    
    // Create and download file
    const blob = new Blob([recipeContent], { type: 'text/plain;charset=utf-8' })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `${recipe.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_recipe.txt`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="bg-white rounded-3xl shadow-2xl p-8 border border-gray-100 hover:shadow-3xl transition-all duration-300 transform hover:-translate-y-1 max-w-3xl mx-auto">
      {/* Title & Description */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-2">
          <h2 className="text-3xl font-bold text-gray-900">{recipe.title}</h2>
          <div className="flex items-center space-x-2">
            <span className="px-3 py-1 bg-gradient-to-r from-orange-100 to-red-100 text-orange-800 rounded-full text-sm font-medium">
              Fresh Recipe
            </span>
          </div>
        </div>
        {recipe.description && (
          <p className="text-gray-700 mb-4">{recipe.description}</p>
        )}
        {/* Stats */}
        <div className="flex flex-wrap space-x-6 text-sm text-gray-600 mb-4">
          {recipe.difficulty && (
            <div>
              <strong>Difficulty:</strong> {recipe.difficulty}
            </div>
          )}
          {recipe.time && (
            <div>
              <strong>Time:</strong> {recipe.time}
            </div>
          )}
          {recipe.servings && (
            <div>
              <strong>Servings:</strong> {recipe.servings}
            </div>
          )}
          {recipe.dietary && recipe.dietary.length > 0 && (
            <div>
              <strong>Dietary:</strong> {recipe.dietary.join(', ')}
            </div>
          )}
          <div>
            <strong>Ingredients:</strong> {recipe.ingredients.length}
          </div>
          <div>
            <strong>Steps:</strong> {recipe.instructions.length}
          </div>
          <div>
           <strong>Used:</strong>{' '}
           {
             recipe.ingredients.filter(ing =>
              [...inputSet].some(input =>
                ing.toLowerCase().includes(input)
              )
             ).length
           }{' '}
           of your ingredients
          </div>

        </div>
      </div>

      {/* Ingredients Section */}
      <section className="mb-8">
        <h3 className="text-xl font-bold text-gray-800 mb-4">Ingredients</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          {recipe.ingredients.map((ingredient, idx) => {
            const ingredientName = ingredient.split('-')[0].trim().toLowerCase()
            const isInput = inputSet.has(ingredientName)
            return (
              <div
                key={idx}
                className={`flex items-center p-3 rounded-xl border-2 transition-all ${
                  isInput
                    ? 'bg-gradient-to-r from-orange-50 to-red-50 border-orange-200 shadow-md'
                    : 'bg-gray-50 border-gray-200'
                }`}
              >
                <span
                  className={`mr-3 text-lg ${isInput ? 'text-orange-600' : 'text-gray-400'}`}
                >
                  {/* Could add an icon here */}
                </span>
                <span
                  className={`font-medium ${isInput ? 'text-orange-800' : 'text-gray-700'}`}
                >
                  {ingredient}
                </span>
                {isInput && (
                  <span className="ml-auto text-xs bg-orange-200 text-orange-800 px-2 py-1 rounded-full font-medium">
                    Your ingredient
                  </span>
                )}
              </div>
            )
          })}
        </div>
      </section>

      {/* Instructions Section */}
      <section className="mb-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4">Instructions</h3>
        <div className="space-y-4">
          {recipe.instructions.map((step, idx) => (
            <div
              key={idx}
              className="flex items-start space-x-4 p-4 bg-gray-50 rounded-xl"
            >
              <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-orange-400 to-red-500 text-white rounded-full flex items-center justify-center font-bold text-sm">
                {idx + 1}
              </div>
              <p className="text-gray-700 leading-relaxed">{step}</p>
            </div>
          ))}
        </div>
      </section>

      {/* Substitutions Section */}
      {recipe.substitutions && recipe.substitutions.length > 0 && (
        <section className="mt-6 p-4 bg-blue-50 rounded-xl border border-blue-200">
          <h4 className="text-lg font-semibold text-blue-900 mb-3">Suggested Substitutions</h4>
          <ul className="space-y-2 list-disc list-inside text-blue-800 text-sm">
            {recipe.substitutions.map((sub, idx) => (
              <li key={idx}>{sub}</li>
            ))}
          </ul>
        </section>
      )}

      {/* Save Button - Single centered button */}
      <div className="mt-8 flex justify-center">
        <button 
          onClick={handleSaveRecipe}
          className="bg-gradient-to-r from-orange-500 to-red-500 text-white px-8 py-4 rounded-xl font-semibold hover:from-orange-600 hover:to-red-600 transition-all duration-200 flex items-center justify-center shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
        >
          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          Save Recipe
        </button>
      </div>
    </div>
  )
}

export default RecipeCard
import React from 'react';

const RecipeCard = ({ recipe, inputIngredients = [] }) => {
  // Create a Set of user-provided ingredients for quick lookup
  const inputSet = new Set(inputIngredients.map(i => i.trim().toLowerCase()));

  // Simplified instruction parsing
  const parseInstructions = (instructions) => {
    if (Array.isArray(instructions)) {
      return instructions.map(step => step.trim()).filter(step => step.length > 0);
    }
    if (typeof instructions === 'string') {
      return [instructions];
    }
    return [];
  };

  const steps = parseInstructions(recipe.instructions);

  // Handles saving the recipe content to a .txt file
  const handleSaveRecipe = () => {
    let recipeContent = `${recipe.title}\n${'='.repeat(recipe.title.length)}\n\n`;
    if (recipe.description) {
      recipeContent += `Description: ${recipe.description}\n\n`;
    }

    const stats = [];
    if (recipe.difficulty) stats.push(`Difficulty: ${recipe.difficulty}`);
    if (recipe.time) stats.push(`Time: ${recipe.time}`);
    if (recipe.servings) stats.push(`Servings: ${recipe.servings}`);
    if (recipe.dietary?.length) stats.push(`Dietary: ${recipe.dietary.join(', ')}`);
    if (stats.length > 0) {
      recipeContent += `${stats.join(' | ')}\n\n`;
    }

    recipeContent += `INGREDIENTS:\n${'-'.repeat(12)}\n`;
    recipe.ingredients.forEach((ingredient) => {
      recipeContent += `• ${ingredient}\n`;
    });

    recipeContent += `\nINSTRUCTIONS:\n${'-'.repeat(12)}\n`;
    steps.forEach((step, idx) => {
      recipeContent += `${idx + 1}. ${step}\n\n`;
    });

    if (recipe.substitutions?.length > 0) {
      recipeContent += `SUGGESTED SUBSTITUTIONS:\n${'-'.repeat(24)}\n`;
      recipe.substitutions.forEach((sub) => {
        recipeContent += `• ${sub}\n`;
      });
    }

    recipeContent += `\n\n--- Recipe generated by Smart Recipe Generator ---\n`;
    recipeContent += `Generated on: ${new Date().toLocaleDateString()}\n`;

    const blob = new Blob([recipeContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${recipe.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_recipe.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white rounded-3xl shadow-2xl p-8 border border-gray-100 hover:shadow-3xl transition-all duration-300 transform hover:-translate-y-1 max-w-3xl mx-auto">
      {/* Title & Description */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-2">
          <h2 className="text-3xl font-bold text-gray-900">{recipe.title}</h2>
          <div className="flex items-center space-x-2">
            <span className="px-3 py-1 bg-gradient-to-r from-orange-100 to-red-100 text-orange-800 rounded-full text-sm font-medium">
              Fresh Recipe
            </span>
          </div>
        </div>
        {recipe.description && (
          <p className="text-gray-700 mb-4">{recipe.description}</p>
        )}
        <div className="flex flex-wrap space-x-6 text-sm text-gray-600 mb-4">
          {recipe.difficulty && <div><strong>Difficulty:</strong> {recipe.difficulty}</div>}
          {recipe.time && <div><strong>Time:</strong> {recipe.time}</div>}
          {recipe.servings && <div><strong>Servings:</strong> {recipe.servings}</div>}
          {recipe.dietary?.length > 0 && <div><strong>Dietary:</strong> {recipe.dietary.join(', ')}</div>}
          <div><strong>Ingredients:</strong> {recipe.ingredients.length}</div>
          <div><strong>Steps:</strong> {steps.length}</div>
          <div>
            <strong>Used:</strong>{' '}
            {
              recipe.ingredients.filter(ing =>
                [...inputSet].some(input =>
                  ing.toLowerCase().includes(input)
                )
              ).length
            }{' '}
            of your ingredients
          </div>
        </div>
      </div>

      {/* Ingredients */}
      <section className="mb-8">
        <h3 className="text-xl font-bold text-gray-800 mb-4">Ingredients</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                     {recipe.ingredients.map((ingredient, idx) => {
             const ingredientName = ingredient.split('-')[0].trim().toLowerCase();
             const isInput = [...inputSet].some(input => ingredientName.includes(input) || input.includes(ingredientName));
            return (
                             <div
                 key={idx}
                 className={`flex items-center p-3 rounded-xl border-2 transition-all ${
                   isInput
                     ? 'bg-gradient-to-r from-orange-50 to-red-50 border-orange-200 shadow-md'
                     : 'bg-blue-50 border-blue-200'
                 }`}
               >
                 <span className={`mr-3 text-lg ${isInput ? 'text-orange-600' : 'text-blue-400'}`} />
                 <span className={`font-medium flex-1 ${isInput ? 'text-orange-800' : 'text-blue-700'}`}>
                   {ingredient}
                 </span>
                 {isInput ? (
                   <span className="ml-2 text-xs bg-orange-200 text-orange-800 px-2 py-1 rounded-full font-medium flex-shrink-0">
                     Your ingredient
                   </span>
                 ) : (
                   <div className="relative group">
                     <span className="ml-2 text-xs bg-blue-200 text-blue-800 px-2 py-1 rounded-full font-medium flex-shrink-0 cursor-help">
                       Need
                     </span>
                     {recipe.substitutions?.some(sub => sub.toLowerCase().includes(ingredientName)) && (
                       <div className="absolute bottom-full right-0 mb-2 px-3 py-2 bg-gray-800 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10 shadow-lg">
                         {recipe.substitutions.find(sub => sub.toLowerCase().includes(ingredientName))}
                         <div className="absolute top-full right-2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-800"></div>
                       </div>
                     )}
                   </div>
                 )}
              </div>
            );
          })}
        </div>
      </section>

      {/* Instructions */}
      <section className="mb-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4">Instructions</h3>
        <div className="space-y-4">
          {steps.map((step, idx) => (
            <div
              key={idx}
              className="flex items-start space-x-4 p-4 bg-gray-50 rounded-xl"
            >
              <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-orange-400 to-red-500 text-white rounded-full flex items-center justify-center font-bold text-sm">
                {idx + 1}
              </div>
              <p className="text-gray-700 leading-relaxed">{step}</p>
            </div>
          ))}
        </div>
      </section>

      {/* Substitutions */}
      {recipe.substitutions?.length > 0 && (
        <section className="mt-6 p-4 bg-blue-50 rounded-xl border border-blue-200">
          <h4 className="text-lg font-semibold text-blue-900 mb-3">Suggested Substitutions</h4>
          <ul className="space-y-2 list-disc list-inside text-blue-800 text-sm">
            {recipe.substitutions.map((sub, idx) => (
              <li key={idx}>{sub}</li>
            ))}
          </ul>
        </section>
      )}

      {/* Save Button */}
      <div className="mt-8 flex justify-center">
        <button 
          onClick={handleSaveRecipe}
          className="bg-gradient-to-r from-orange-500 to-red-500 text-white px-8 py-4 rounded-xl font-semibold hover:from-orange-600 hover:to-red-600 transition-all duration-200 flex items-center justify-center shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
        >
          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          Save Recipe
        </button>
      </div>
    </div>
  );
};

export default RecipeCard;